// Generated by IcedCoffeeScript 1.6.3-j
(function() {
  var Engine, List, spawn,
    __slice = [].slice;

  spawn = require('child_process').spawn;

  List = require('iced-data-structures').List;

  exports.Engine = Engine = (function() {
    function Engine(_arg) {
      this.args = _arg.args, this.name = _arg.name;
      this._exit_code = null;
      this._exit_cb = null;
      this._n_out = 0;
      this._probes = new List;
      this._data_buffers = {
        stdin: [],
        stdout: []
      };
    }

    Engine.prototype.stdout = function() {
      return Buffer.concat(this._data_buffers.stdout);
    };

    Engine.prototype.stderr = function() {
      return Buffer.concat(this._data_buffers.stderr);
    };

    Engine.prototype._got_data = function(data, source) {
      var s;
      this._data_buffers[source].push(data);
      s = data.toString('utf8');
      return this._probes.walk((function(_this) {
        return function(o) {
          var term, _i, _len, _ref;
          _ref = o.terms;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            term = _ref[_i];
            if ((!(term.source != null) || (term.source === source)) && s.match(term.pattern)) {
              _this._probes.remove(o);
              _this._data_buffers[source] = [];
              o.cb(null, data, source);
              return true;
            }
          }
          return false;
        };
      })(this));
    };

    Engine.prototype._clear_probes = function() {
      return this._probes.walk((function(_this) {
        return function(o) {
          _this._probes.remove(o);
          return o.cb(new Error("EOF before expectation met"));
        };
      })(this));
    };

    Engine.prototype.expect = function(terms, cb) {
      this._probes.push({
        terms: terms,
        cb: cb
      });
      return this;
    };

    Engine.prototype.run = function() {
      this.proc = spawn(this.name, this.args);
      this.pid = this.proc.pid;
      this._n_out = 3;
      this.proc.on('exit', (function(_this) {
        return function(status) {
          return _this._got_exit(status);
        };
      })(this));
      this.proc.stderr.on('end', (function(_this) {
        return function() {
          return _this._maybe_finish();
        };
      })(this));
      this.proc.stdout.on('end', (function(_this) {
        return function() {
          return _this._maybe_finish();
        };
      })(this));
      this.proc.stderr.on('data', (function(_this) {
        return function(data) {
          return _this._got_data(data, 'stderr');
        };
      })(this));
      return this.proc.stdout.on('data', (function(_this) {
        return function(data) {
          return _this._got_data(data, 'stdout');
        };
      })(this));
    };

    Engine.prototype.send = function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (this.proc) {
        return (_ref = this.proc.stdin).write.apply(_ref, args);
      } else {
        return args.slice(-1)[0](new Error("EOF on input; can't send"));
      }
    };

    Engine.prototype._got_exit = function(status) {
      this._exit_code = status;
      this.proc = null;
      return this._maybe_finish();
    };

    Engine.prototype._maybe_finish = function() {
      var ecb;
      if (--this._n_out <= 0) {
        this._clear_probes();
        if ((ecb = this._exit_cb) != null) {
          this._exit_cb = null;
          ecb(this._exit_code);
        }
        return this.pid = -1;
      }
    };

    Engine.prototype.wait = function(cb) {
      if ((this._exit_code != null) && this._n_out <= 0) {
        return cb(this._exit_code);
      } else {
        return this._exit_cb = cb;
      }
    };

    return Engine;

  })();

}).call(this);
